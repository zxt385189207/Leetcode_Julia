//给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 
//
// 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 
//
// 示例 1: 
//
// 输入: [7,1,5,3,6,4]
//输出: 7
//解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
//     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
// 
//
// 示例 2: 
//
// 输入: [1,2,3,4,5]
//输出: 4
//解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
//     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
//     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
// 
//
// 示例 3: 
//
// 输入: [7,6,4,3,1]
//输出: 0
//解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 
// Related Topics 贪心算法 数组


//leetcode submit region begin(Prohibit modification and deletion)
public class Solution {
    // 股票买卖策略
    // 单独交易日: 今天价格p1,明天价格p2, 明天卖出可赚取的金额p2-p1
    // 连续上涨交易日股票价格为p1,p2,p3...pn, 则第一天买入到最后一天卖出收益最大.
    //   即 pn - p1 等价于 (p2 - p1) + (p3 - p2) ... (pn - pn-1)
    // 连续下降交易日: 则不买卖收益最大，即不会亏钱。
    //
    // 可以当天买和当天卖
    public int MaxProfit(int[] prices)
    {
        // 收益
        var profit = 0;
            
        for (int i = 1; i < prices.Length; i++)
        {
            // 第二天价格和第一天价格的对比
            int temp = prices[i] - prices[i - 1];
            // >0代表赚钱,计算第一天买入,第二天卖出得到的收益
            if (temp > 0)
            {
                profit += temp;
            }
        }

        return profit;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
